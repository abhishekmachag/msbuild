name: Run PowerShell Script

on:
  push:
    branches:
      - master

jobs:
  run_script:
    runs-on: windows-latest

    steps:
    - run: whoami
    - name: Run PowerShell Script
      # shell: powershell
      run: |
            Enable-PSRemoting -Force
            Set-Item WSMan:\localhost\Client\TrustedHosts -Value "34.244.15.14" -Force
            # set-item WSMan:\localhost\Client\TrustedHosts "*"
            $username = "Administrator"
            $password = "6ppr0KasqshE8qDIMF9WdTz=IUBC.3-)" | ConvertTo-SecureString -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential($username, $password)
            Enter-PSSession -ComputerName 34.244.15.14 -Credential $credential  

# name: resusable-workflow-ubuntu

# on:
#   push:
#     branches: ["master"]
#   workflow_call:
#   workflow_dispatch:
# jobs:
  # build:
  #   runs-on: windows-2019
  #   # permissions:
  #   #   packages: write
  #   #   contents: read
  #   # if: ${{ github.event.inputs.environment == 'dev' }}
  #   env:
  #     BUILD_PATH: ${{ github.workspace }}\_build
  #   steps:
    # - name: Checkout First1 Repository
    #   uses: actions/checkout@v3
    #   with:
    #     repository: abhishekmachag/msbuild
    #     ref: master
    #     path: ${{ github.workspace }}/msbuild
    #     # token: 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
 
    # - run: Get-ChildItem

    # - name: Setup MSBuild
    #   uses: microsoft/setup-msbuild@v1
    
    # - name: Setup NuGet
    #   uses: NuGet/setup-nuget@v1  
  
  

    # - name: Restore NuGet packages with msbuild
    #   working-directory: ${{ github.workspace }}\msbuild
    #   run: nuget restore EFContextMock.sln
    
      
    # - name: Build with msbuild
    #   working-directory: ${{ github.workspace }}\msbuild
    #   run: msbuild.exe EFContextMock.sln /p:DeployOnBuild=true /p:PublishProfile=Publish /p:PublishUrl="${{ env.BUILD_PATH }}" /p:VersionSuffix="${{ github.run_number }}" /p:IsPackaging=true


    # - name: Compress Web Build artifact
    #   run: Compress-Archive -Path "${{ env.BUILD_PATH }}" -DestinationPath "${{ env.BUILD_PATH }}.zip" 


    # - name: Upload artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: Artifacts
    #     path: "${{ env.BUILD_PATH }}.zip"    


  # deploy:
  #   runs-on: local
  #   # needs: build
  #   steps:
    
      # - name: Download artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: Artifacts
      #     path: ${{ github.workspace }}/_build

    # - name: Connect to Windows Server
    #   run: |
    #     # Set the server connection details
    #     $serverAddress = "your-windows-server-ip"
    #     $username = "Administrator"
    #     $password = "your-password"
    #     $destinationPath = "C:\Path\To\Copy"

    #     # Create a PSCredential object
    #     $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
    #     $credentials = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

    #     # Copy files to the Windows server using PowerShell Remoting
    #     New-PSSession -ComputerName $serverAddress -Credential $credentials -SessionOption (New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck) -Name "RemoteSession" -ErrorAction Stop
    #     Copy-Item -Path "${{ github.workspace }}/downloaded-artifact/*" -Destination "\\$serverAddress\$destinationPath" -Recurse -ToSession (Get-PSSession -Name "RemoteSession")
    #     Remove-PSSession -Name "RemoteSession"
# Set the connection details
    # - run: whoami
    # - name: Connect to Windows VM
    #   run: |
    #       $username = "Administrator"
    #       $password = "6ppr0KasqshE8qDIMF9WdTz=IUBC.3-)" | ConvertTo-SecureString -AsPlainText -Force
    #       $credential = New-Object System.Management.Automation.PSCredential($username, $password)
    #       Enter-PSSession -ComputerName 34.244.15.14 -Credential $credential  
    #     # $myUserName = "Administrator"
    #     # $myPlainTextPassword = "6ppr0KasqshE8qDIMF9WdTz=IUBC.3-)"
    #     # $myPassword = $MyPlainTextPassword | ConvertTo-SecureString -AsPlainText -Force
    #     # $credential = New-Object System.Management.Automation.PSCredential($MyUserName, $myPassword)
    #     # $networkCredential = $credential.GetNetworkCredential()
    #     # $networkCredential | Select-Object UserName, Password
    #     # $ipAddress = "34.244.15.14"
    #     # $sessionOption = New-PSSessionOption `
    #     # -SkipCACheck `
    #     # -SkipCNCheck `
    #     # -SkipRevocationCheck
    #     # $psSession = @{
    #     #   ComputerName = $ipAddress
    #     #   UseSSL = $true
    #     #   Credential = $credential
    #     #   SessionOption = $sessionOption
    #     # }
    #     # Enter-PSSession @psSession
